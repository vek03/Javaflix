package admin;

//imports necessarios
import conexao.Conexao;
import java.awt.Image;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.ImageIcon;

/**
 *
 * @author Victor e Mariane
 * Mari Vek Histories
 */

public class frm_manage_users extends javax.swing.JFrame {

    //aqui declaramos a classe de conexão como con_cliente, para utilizá-la ao longo do código
    Conexao con_cliente;
    
    //declarando variaveis para passagem dos dados do admin entre as classes
    private int id;
    private String usuario;
    private String nome;
    
    /**
     * Creates new form frmTela
     */
    //método construtor que irá iniciar os componentes, conectar ao banco e trazer as informações
    //da tabela no primeiro registro
    public frm_manage_users(int realId, String realUser, String realNome) {
        initComponents(); //iniciando componentes do JFrame
        //chamando metodo que inicia as variaveis do parametro
        initVariables(realId, realUser, realNome);
        con_cliente = new Conexao(); // inicialização do objeto
        con_cliente.conecta(); // chama o método que conecta
        //enviando instrução SQL que seleciona todos os usuarios do banco
        con_cliente.executaSQL("select * from usuarios order by id");
        preencherTabela(); //chamando metodo que preenche a tabela com os registro dos usuarios
        posicionarRegistro(); //chamando metodo que posiciona o resultset
        tblClientes.setAutoCreateRowSorter(true);// ativa a classificação ordenada da tabela
        logo(); //chamando metodo que seta o logo 
        icone(); //chamando metodo que seta o icone 
        reload(); //chamando metodo que seta icone ao botão de recarregar
    }

    //metodo que inicia as variaveis do parametro
    private void initVariables(int realId, String realUser, String realNome){
        id = realId;
        usuario = realUser;
        nome = realNome;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        lblEndereco = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        btnAlterar = new javax.swing.JButton();
        brnExcluir = new javax.swing.JButton();
        txtCod = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        txtNome = new javax.swing.JTextField();
        lblPesquisa = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        txtPesquisa = new javax.swing.JTextField();
        btnPrimeiroRegistro = new javax.swing.JButton();
        txtNasc = new javax.swing.JFormattedTextField();
        lblCod = new javax.swing.JLabel();
        btnVoltarUmRegistro = new javax.swing.JButton();
        lblNome = new javax.swing.JLabel();
        btnAvancarUmRegistro = new javax.swing.JButton();
        lblAviso = new javax.swing.JLabel();
        lblNasc = new javax.swing.JLabel();
        btnUltimoRegistro = new javax.swing.JButton();
        lblTel = new javax.swing.JLabel();
        btnNovo = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        txtTel = new javax.swing.JFormattedTextField();
        lblUsuario = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        lblSenha = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        logo = new javax.swing.JLabel();
        alert = new javax.swing.JLabel();
        btnReload = new javax.swing.JButton();
        aviso = new javax.swing.JLabel();
        aviso1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Javaflix(admin - Cadastro de Clientes)");
        setResizable(false);

        Panel.setBackground(new java.awt.Color(0, 51, 51));

        lblEndereco.setForeground(new java.awt.Color(255, 255, 255));
        lblEndereco.setText("Endereço:");

        btnCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/disk.png"))); // NOI18N
        btnCadastrar.setToolTipText("Salvar");
        btnCadastrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Nome", "Data Nascimento", "Telefone", "Endereço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.setToolTipText("Clientes");
        tblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesMouseClicked(evt);
            }
        });
        tblClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblClientesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblClientes);

        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/application_edit.png"))); // NOI18N
        btnAlterar.setToolTipText("Alterar");
        btnAlterar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        brnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/application_delete.png"))); // NOI18N
        brnExcluir.setToolTipText("Deletar");
        brnExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        brnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnExcluirActionPerformed(evt);
            }
        });

        txtCod.setEditable(false);
        txtCod.setText(" ");
        txtCod.setToolTipText("Código/Id");

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/door_in.png"))); // NOI18N
        btnExit.setToolTipText("Retornar para o Modo de Seleção");
        btnExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtNome.setToolTipText("Insira seu Nome");

        lblPesquisa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPesquisa.setForeground(new java.awt.Color(255, 255, 255));
        lblPesquisa.setText("Pesquisa por nome do Cliente:");

        txtEndereco.setToolTipText("Insira seu endereço");

        txtPesquisa.setToolTipText("Pesquisar...");
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });

        btnPrimeiroRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/resultset_first.png"))); // NOI18N
        btnPrimeiroRegistro.setToolTipText("Primeiro registro");
        btnPrimeiroRegistro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrimeiroRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrimeiroRegistroActionPerformed(evt);
            }
        });

        try {
            txtNasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNasc.setToolTipText("Insira a sua data de nascimento");

        lblCod.setForeground(new java.awt.Color(255, 255, 255));
        lblCod.setText("Código: ");

        btnVoltarUmRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/resultset_previous.png"))); // NOI18N
        btnVoltarUmRegistro.setToolTipText("Registro anterior");
        btnVoltarUmRegistro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVoltarUmRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarUmRegistroActionPerformed(evt);
            }
        });

        lblNome.setForeground(new java.awt.Color(255, 255, 255));
        lblNome.setText("Nome:");

        btnAvancarUmRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/resultset_next.png"))); // NOI18N
        btnAvancarUmRegistro.setToolTipText("Próximo registro");
        btnAvancarUmRegistro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAvancarUmRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvancarUmRegistroActionPerformed(evt);
            }
        });

        lblAviso.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        lblAviso.setForeground(new java.awt.Color(255, 51, 51));
        lblAviso.setText("O Código não necessita de inserção ou alteração");

        lblNasc.setForeground(new java.awt.Color(255, 255, 255));
        lblNasc.setText("Data Nascimento:");

        btnUltimoRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/resultset_last.png"))); // NOI18N
        btnUltimoRegistro.setToolTipText("Úlitmo registro");
        btnUltimoRegistro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUltimoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUltimoRegistroActionPerformed(evt);
            }
        });

        lblTel.setForeground(new java.awt.Color(255, 255, 255));
        lblTel.setText("Telefone:");

        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/resultset/add.png"))); // NOI18N
        btnNovo.setToolTipText("Limpar Seleção");
        btnNovo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setText("Gerenciador de Usuários");

        try {
            txtTel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtTel.setToolTipText("Insira seu telefone");

        lblUsuario.setForeground(new java.awt.Color(255, 255, 255));
        lblUsuario.setText("Usuário:");

        txtUsuario.setToolTipText("Escolha um usuário para entrar na sua conta");

        lblSenha.setForeground(new java.awt.Color(255, 255, 255));
        lblSenha.setText("Senha:");

        txtSenha.setToolTipText("Insira uma senha numérica de até 14 digitos");

        alert.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        alert.setForeground(new java.awt.Color(255, 0, 0));

        btnReload.setToolTipText("Recarregar tabela");
        btnReload.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        aviso.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        aviso.setForeground(new java.awt.Color(255, 0, 51));
        aviso.setText("Não é possível alterar o usuário, apenas criar");

        aviso1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        aviso1.setForeground(new java.awt.Color(255, 0, 51));
        aviso1.setText("Não é possível alterar a senha, apenas criar");

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCod)
                                    .addComponent(lblNome)
                                    .addComponent(lblNasc)
                                    .addComponent(lblTel)
                                    .addComponent(lblEndereco)
                                    .addComponent(lblUsuario)
                                    .addComponent(lblSenha))
                                .addGap(53, 53, 53)
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addComponent(txtTel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(alert, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(PanelLayout.createSequentialGroup()
                                                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(aviso))
                                            .addComponent(txtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(PanelLayout.createSequentialGroup()
                                                .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblAviso))
                                            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtEndereco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(PanelLayout.createSequentialGroup()
                                                .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(aviso1)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addComponent(btnPrimeiroRegistro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVoltarUmRegistro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAvancarUmRegistro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUltimoRegistro)
                                .addGap(41, 41, 41)
                                .addComponent(btnNovo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCadastrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAlterar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(brnExcluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnReload)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExit))
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addComponent(lblPesquisa)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(title)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(title))
                    .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCod)
                    .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAviso))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNome))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNasc)
                    .addComponent(txtNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTel)
                    .addComponent(txtTel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alert, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEndereco)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aviso))
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSenha)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aviso1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVoltarUmRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAvancarUmRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUltimoRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrimeiroRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(brnExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPesquisa)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //metodo que seta o logo do programa
    private void logo(){
        //método que traz a imagem na raiz do projeto
        //método getClass e getResourse são para puxar a imagem no arquivo .jar 
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/icones/javaflix.png"));
        //método que redimensiona a imagem
        Image scaleImage = imageIcon.getImage().getScaledInstance(100, 50,Image.SCALE_DEFAULT);
        //método que traz a imagem dimensionada
        ImageIcon img = new ImageIcon(scaleImage);
        
        logo.setIcon(img);
    }
    
    //metodo que seta o icone do programa
    private void icone(){
        //método que traz a imagem na raiz do projeto
        //método getClass e getResourse são para puxar a imagem no arquivo .jar 
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/icones/icon.png"));
        //método que redimensiona a imagem
        Image scaleImage = imageIcon.getImage().getScaledInstance(45, 45,Image.SCALE_DEFAULT);
        //método que traz a imagem dimensionada
        ImageIcon img = new ImageIcon(scaleImage);
        
        this.setIconImage(img.getImage());
    }
    
    //metodo que seta icone ao botão de recarregar
    private void reload(){
        //método que traz a imagem na raiz do projeto
        //método getClass e getResourse são para puxar a imagem no arquivo .jar 
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/icones/resultset/reload.png"));
        //método que redimensiona a imagem
        Image scaleImage = imageIcon.getImage().getScaledInstance(17, 17,Image.SCALE_DEFAULT);
        //método que traz a imagem dimensionada
        ImageIcon img = new ImageIcon(scaleImage);
        
        btnReload.setIcon(img);
    }

    private void tblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesMouseClicked
        //ao clicar em um registro da tabela, o programa irá trazer as informações do registro
        //SELECT
        
        //vendo qual registro foi selecionado
        int linha_selecionada = tblClientes.getSelectedRow();
        int id_selecionado = Integer.parseInt(tblClientes.getValueAt(linha_selecionada, 0).toString());

        con_cliente.executaSQL("select * from usuarios where id = '" + id_selecionado + "%'");
        posicionarRegistro();   
    }//GEN-LAST:event_tblClientesMouseClicked

    private void tblClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblClientesKeyPressed
        //ao clicar em um registro da tabela, o programa irá trazer as informações do registro
        //SELECT
        
        //vendo qual registro foi selecionado
        int linha_selecionada = tblClientes.getSelectedRow();
        int id_selecionado = Integer.parseInt(tblClientes.getValueAt(linha_selecionada, 0).toString());

        con_cliente.executaSQL("select * from usuarios where id = '" + id_selecionado + "%'");
        posicionarRegistro();
    }//GEN-LAST:event_tblClientesKeyPressed

    private void btnPrimeiroRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrimeiroRegistroActionPerformed
        //este botão irá selecionar o primeiro registro da tabela presente no banco
        //SELECT
        
        try {
            con_cliente.executaSQL("select * from usuarios order by id");
            con_cliente.resultset.first();
            mostrar_Dados();
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null, "Não foi possível acessar o primeiro registro: ");
        }
    }//GEN-LAST:event_btnPrimeiroRegistroActionPerformed

    private void btnUltimoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUltimoRegistroActionPerformed
        // este botão irá selecionar o último registro da tabela presente no banco
        //SELECT
        
        try {
            con_cliente.executaSQL("select * from usuarios order by id");
            con_cliente.resultset.last();
            mostrar_Dados();
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null, "Não foi possível posicionar no último registro: ");
        }
    }//GEN-LAST:event_btnUltimoRegistroActionPerformed

    private void btnVoltarUmRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarUmRegistroActionPerformed
        //este botão irá selecionar o registro anterior em relação ao atual
        //contém tratamento para que ele não busque um registro inexistente ao tentar voltar...
        //um registro partindo do primeiro
        //SELECT
        
        try {
            //se o registro selecionado não for o primeiro, ele irá voltar para o registro anterior
            //senão, ele irá para o primeiro registro 
            if(con_cliente.resultset.isFirst() == false){
                con_cliente.resultset.previous();
            }else{
                con_cliente.executaSQL("select * from usuarios order by id");
                con_cliente.resultset.first();
            }
            mostrar_Dados();
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null, "Não foi possível posicionar no registro anterior: ");
        }
    }//GEN-LAST:event_btnVoltarUmRegistroActionPerformed

    private void btnAvancarUmRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvancarUmRegistroActionPerformed
        //este botão irá selecionar o registro seguinte em relação ao selecionado
        //contém tratamento para que ele não tente selecionar um registro inexistente após o último
        //SELECT

        try { 
            //se o registro selecionado não for o último, ele irá passar para o próximo registro
            //senão, ele irá para o último registro
            if(con_cliente.resultset.isLast() == false){
                con_cliente.resultset.next();
            }else{
               con_cliente.executaSQL("select * from usuarios order by id");
               con_cliente.resultset.last();
            }
            mostrar_Dados();
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null, "Não foi possível posicionar no próximo registro: ");
        }
    }//GEN-LAST:event_btnAvancarUmRegistroActionPerformed
    
    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        //este botão irá limpar os dados do registro que estava selecionada dos campos de cadastro,...
        //permitindo assim o usuário inserir informações
        //para um novo registro
        //CLEAN
        
        txtCod.setText("");
        txtNome.setText("");
        txtNasc.setText("");
        txtTel.setText("");
        txtEndereco.setText("");
        txtUsuario.setText("");
        txtSenha.setText("");
        txtCod.requestFocus();
    }//GEN-LAST:event_btnNovoActionPerformed

    //metodo que insere um usuario no banco
    private void insert(){
        //adicionando os valores dos campos as variaveis
            String nome = txtNome.getText();
            
            DateTimeFormatter formatBra = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            DateTimeFormatter formatSql = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate nascimento = LocalDate.parse(txtNasc.getText(), formatBra);
            String data_nasc = nascimento.format(formatSql);
            
            String endereco = txtEndereco.getText();
            String telefone = txtTel.getText();
            String usuario = txtUsuario.getText();
            String senha = txtSenha.getText();

            //inserindo o novo registro ao banco
            try {
                String insert_sql="insert into usuarios  (`nome`, `data_nasc`, `endereco`, `telefone`, `usuario`, `senha`) values ('" + nome + "','" + data_nasc + "','" + endereco + "','" + telefone + "','" + usuario + "','" + senha + "');";
                con_cliente.statement.executeUpdate(insert_sql);
                JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);

            }catch(SQLException errosql){
                JOptionPane.showMessageDialog(null, "\n Erro no cadastro :\n ", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
            }
    }
    
    //metodo que atualiza um registro do banco
    private void update(){
        //adicionando os valores dos campos as variaveis
        String nome = txtNome.getText();
        
        DateTimeFormatter formatBra = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter formatSql = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate nasc = LocalDate.parse(txtNasc.getText(), formatBra);
        String data_nasc = nasc.format(formatSql);
        
        String endereco = txtEndereco.getText();
        String telefone = txtTel.getText();
        
        //criando variavel de interação com o banco e a de mensagem de aviso
        String sql = "";
        String msg = "";

        //inserindo o novo registro ao banco
        try {
            sql="update usuarios set nome='" + nome + "',endereco='" + endereco + "', telefone='" + telefone + "', data_nasc='" + data_nasc + "' where id = " + txtCod.getText();
            msg="Alteração de registro";
        
            con_cliente.statement.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, msg + " realizada com sucesso!!", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);

        }catch(SQLException errosql){
                JOptionPane.showMessageDialog(null, "\n Erro no cadastro :\n ", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        //este botão irá cadastrar os dados inseridos pelo usuário no banco, adicionando mais...
        //um registro á tabela
        //INSERT
        
        //verificando se os campos foram preenchidos
        if(txtNome.getText().length() > 0 && txtNasc.getValue() != null && txtTel.getValue() != null
            && txtEndereco.getText().length() > 0 && txtUsuario.getText().length() > 0
            && txtSenha.getText().length() > 0){
            try{
                //verificando se o usuário está disponivel
                String pesquisa = "select * from usuarios where usuario = '" + txtUsuario.getText() + "'";
                con_cliente.executaSQL(pesquisa);
            
                if(con_cliente.resultset.first()){
                    JOptionPane.showMessageDialog(null, "Este usuário já está sendo utilizado!\n\nEscolha um Usuário diferente!" ,"Informação",JOptionPane.INFORMATION_MESSAGE);
                }else{
                    //verificando se a senha contém apenas numeros
                    try{
                        long teste;
                        teste =  Long.parseLong(txtSenha.getText());
                        
                        //verificando se a senha possui de 4 a 8 digitos
                        if(txtSenha.getText().length() < 4 || txtSenha.getText().length() > 8){
                            JOptionPane.showMessageDialog(null, "A senha deve ter de 4 a 8 digitos!\n\nTente novamente!" ,"Informação",JOptionPane.INFORMATION_MESSAGE);
                        }else{
                            //inserindo registro no banco
                            insert();
                            alert.setText(null);
                            con_cliente.executaSQL("select * from usuarios order by id");
                            con_cliente.resultset.first();
                            preencherTabela();
                            posicionarRegistro();
                            mostrar_Dados();
                        }
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null, "A senha só pode conter números!" ,"Informação",JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null, "\n Erro ao buscar usuário no banco :\n ", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }else{
            alert.setText("Preencha os campos!");
        }    
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        //este botão irá alterar um ou mais campos de um registro já existente selecionado pelo usuário, ou caso não tiver selecionado, irá criar
        //um novo registro assim como o botão cadastrar
        //INSERT & UPDATE

        //criando variavel de interação com o banco e a de mensagem de aviso
        String sql = "";
        String msg = "";
        
        //verica se os campos foram preenchidos
        if(txtNome.getText().length() > 0 && txtNasc.getValue() != null && txtTel.getValue() != null
            && txtEndereco.getText().length() > 0 && txtSenha.getText().length() > 0){
            try{
                //atualizando registro
                update();
                alert.setText(null);
                con_cliente.executaSQL("select * from usuarios order by id");
                con_cliente.resultset.first();
                preencherTabela();
                posicionarRegistro();
                mostrar_Dados();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "\n Não foi possível atualizar o registro! :\n ", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }else{
            alert.setText("Preencha os campos!");
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void brnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnExcluirActionPerformed
        //este botão irá excluir o registro selecionado pelo usuário
        //DELETE
        
        //atribuindo variavel de comunicação com o banco
        String sql="";
        
        //excluindo registro
        try {
            int resposta = JOptionPane.showConfirmDialog(rootPane, "Deseja excluir o registro: ","Confirmar Exclusão", JOptionPane.YES_NO_OPTION, 3);
            if (resposta == 0){
                sql = "delete from usuarios where id = " + txtCod.getText();   
                int excluir = con_cliente.statement.executeUpdate(sql);
                
                if (excluir == 1){
                    JOptionPane.showMessageDialog(null, "Exclusão realizada com sucesso!!","Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
                    con_cliente.executaSQL("select * from usuarios order by id");
                    con_cliente.resultset.first();
                    preencherTabela();
                    posicionarRegistro();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Operação cancelada pelo usuário!!","Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            
        }catch(SQLException excecao){
            JOptionPane.showMessageDialog(null, "\n Erro na exclusão:\n\nEste usuário não pode ser deletado enquanto existirem locações em seu nome ", "Mensagem do Programa", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_brnExcluirActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        //toda vez que um caracter novo for inserido na barra de pesquisa, ela irá atualizar a busca para o item mais próximo ou identico na tabela
        //SELECT
        
        //buscando um registro com os caracteres selecionados pelo nome
        try {
            String pesquisa = "select * from usuarios where nome like '" + txtPesquisa.getText() + "%'";
            con_cliente.executaSQL(pesquisa);
            
            if(con_cliente.resultset.first()){
                preencherTabela();
                posicionarRegistro();
            }
            else{
                JOptionPane.showMessageDialog(null, "\n Não existe dados com este parâmetro!!", "Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
            }
        }catch (SQLException errosql){
            JOptionPane.showMessageDialog(null, "\n Os dados digitados não foram localizados!! :\n ", "Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        //botão que irá retornar ao modo de seleção
        frm_selection_mode mostra = new frm_selection_mode(id, usuario, nome);
        mostra.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        //botão que recarrega os registros da tabela
        
        con_cliente.executaSQL("select * from usuarios order by id");
        preencherTabela();
        posicionarRegistro();
        alert.setText(null);
    }//GEN-LAST:event_btnReloadActionPerformed

    
    //método que irá preencher a tabela com os registros presentes no banco
    private void preencherTabela(){
        tblClientes.getColumnModel().getColumn(0).setPreferredWidth(3);
        tblClientes.getColumnModel().getColumn(1).setPreferredWidth(60);
        tblClientes.getColumnModel().getColumn(2).setPreferredWidth(20);
        tblClientes.getColumnModel().getColumn(3).setPreferredWidth(70);
        tblClientes.getColumnModel().getColumn(4).setPreferredWidth(100);
        
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
        modelo.setNumRows(0);
        
        try {
            DateTimeFormatter formatSql = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter formatBra = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            
            con_cliente.resultset.beforeFirst();
            while(con_cliente.resultset.next()){
                LocalDate data_nasc = LocalDate.parse(con_cliente.resultset.getString("data_nasc"), formatSql);
                
                modelo.addRow(new Object[]{
                    con_cliente.resultset.getString("id"),con_cliente.resultset.getString("nome"),data_nasc.format(formatBra), con_cliente.resultset.getString("telefone"), con_cliente.resultset.getString("endereco")

                });
            }
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null,"\n Erro ao listar dados da tabela!! :\n ","Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    //método que irá posicionar o resultset no primeiro registro
    private void posicionarRegistro(){
        try {
            con_cliente.resultset.first();
            mostrar_Dados();
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null,"Não foi possível posicionar no primeiro registro:","Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    //método que irá mostrar os dados do registro selecionado nos campos
    private void mostrar_Dados(){
        try {
            txtCod.setText(con_cliente.resultset.getString("id"));
            txtNome.setText(con_cliente.resultset.getString("nome"));
            txtTel.setValue(con_cliente.resultset.getString("telefone"));
            txtEndereco.setText(con_cliente.resultset.getString("endereco"));
            txtUsuario.setText(con_cliente.resultset.getString("usuario"));
            txtSenha.setText(con_cliente.resultset.getString("senha"));
            
            DateTimeFormatter formatSql = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter formatBra = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate data_devolucao = LocalDate.parse(con_cliente.resultset.getString("data_nasc"), formatSql);
            txtNasc.setValue(data_devolucao.format(formatBra));
        }catch(SQLException erro){
            JOptionPane.showMessageDialog(null,"Não localizou dados: ","Mensagem do Programa",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel;
    private javax.swing.JLabel alert;
    private javax.swing.JLabel aviso;
    private javax.swing.JLabel aviso1;
    private javax.swing.JButton brnExcluir;
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnAvancarUmRegistro;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnPrimeiroRegistro;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnUltimoRegistro;
    private javax.swing.JButton btnVoltarUmRegistro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAviso;
    private javax.swing.JLabel lblCod;
    private javax.swing.JLabel lblEndereco;
    private javax.swing.JLabel lblNasc;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPesquisa;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblTel;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JLabel logo;
    private javax.swing.JTable tblClientes;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtCod;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JFormattedTextField txtNasc;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JFormattedTextField txtTel;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
